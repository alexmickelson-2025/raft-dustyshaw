@using Raft;

@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>
<label for="speed">
		Election timeout between @(150 * this.IntervalScalar) and @(300 *
		this.IntervalScalar) ms.
	<br>
	<input type="range" id="speed" name="speed" min="1" max="100" @bind:event="oninput"
	@bind=this.IntervalScalar @onchange=UpdateTimer /> @this.IntervalScalar
</label>
</div>

<div>
	<label for="NetworkRequestDelay">
		Network Delay @NetworkRequestDelay milliseconds
		<br>
		<input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="10000"
			   @bind:event="oninput" @bind=NetworkRequestDelay />
	</label>
</div>


<button @onclick="startSimulation">Start</button>

<div class="row">
@foreach(var node in nodes) {
		var timeoutRemaining = Math.Abs((DateTime.Now - node.InnerNode.WhenTimerStarted).TotalMilliseconds);
		var maxIntervalSeconds = 300 * this.IntervalScalar * 100; // converting to milliseconds
		var percentageRemaining = (int)(100 * (timeoutRemaining / maxIntervalSeconds));


	<div class="p-3 col-4">
		<div class="border p-3 rounded-3">
			<div class="d-flex flex-column justify-content-between">
				<h1> @(FormatId(node.InnerNode.NodeId))</h1>
				<div class="@StateClass(node)">@node.State</div>
				<p>Election Timeout: @(@node.InnerNode.ElectionTimeout) ms.</p>
				<h2>Term #@node.TermNumber</h2>
				<p>Leader Id: @(FormatId(node.LeaderId) )</p>
				<div class="progress" role="progressbar" aria-label="Basic example"
						aria-valuenow=@(Math.Abs(timeoutRemaining) * this.IntervalScalar ) aria-valuemin="0"
						aria-valuemax="@(maxIntervalSeconds)">
					<div class="progress-bar bg-dark-subtle" style="width: @(10000 * timeoutRemaining / maxIntervalSeconds)%;"></div>
				</div>
			</div>
		</div>
	</div>
}
</div>

@code {
	List<SimulationNode> nodes = new();

	private Timer? timer;
	bool isRunning = false;

	public int IntervalScalar = 2;

	public int NetworkRequestDelay = 10;

	void startSimulation()
	{
		var node1 = new Node([], IntervalScalar, NetworkRequestDelay);
		var node2 = new Node([], IntervalScalar, NetworkRequestDelay);
		var node3 = new Node([], IntervalScalar, NetworkRequestDelay);


		var simulation1 = new SimulationNode(node1);
		var simulation2 = new SimulationNode(node2);
		var simulation3 = new SimulationNode(node3);

		node1.OtherNodes = [simulation2, simulation3];
		node2.OtherNodes = [simulation1, simulation3];
		node3.OtherNodes = [simulation1, simulation2];

		nodes = [simulation1, simulation2, simulation3];

		isRunning = true;
		timer = new Timer(_ =>
		{
			InvokeAsync(StateHasChanged);
		}, null, 0, 200);
	}

	public void UpdateTimer()
	{
		foreach (var node in nodes)
		{
			node.InnerNode.LowerBoundElectionTime = 150 * IntervalScalar;
			node.InnerNode.UpperBoundElectionTime = 300 * IntervalScalar;
		}

		timer?.Dispose();
		timer = new Timer(_ =>
		{
			InvokeAsync(StateHasChanged);
		}, null, 0, 100 * (int)this.IntervalScalar); 

	}

	string StateClass(SimulationNode node)
	{
		if (node.State == Node.NodeState.Leader)
		{
			return "bg-primary text-white p-1 rounded";
		}
		if (node.State == Node.NodeState.Candidate)
		{
			return "bg-success text-white p-1 rounded";
		}
		if (node.State == Node.NodeState.Follower)
		{
			return "bg-secondary text-white p-1 rounded";
		}
		return "";
	}

	public static string FormatMilliSeconds(double milliSeconds)
	{
		return $"{milliSeconds / 1000.0:F1}";
	}

	public static string FormatId(Guid id)
	{
		return id.ToString("N").Substring(0, 4);
	}
}
