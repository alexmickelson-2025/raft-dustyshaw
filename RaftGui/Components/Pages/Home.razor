@using Raft;

@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>
<label for="speed">
		Election timeout between @(150 * IntervalScalar) and @(300 *
		IntervalScalar) seconds.
	<br>
	<input type="range" id="speed" name="speed" min="1" max="100" @bind:event="oninput"
	@bind=IntervalScalar @onchange=UpdateTimer /> @IntervalScalar
</label>
</div>

<div>
	<label for="NetworkRequestDelay">
		Network Delay @FormatMilliSeconds(NetworkRequestDelay) seconds
		<br>
		<input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="10000"
			   @bind:event="oninput" @bind=NetworkRequestDelay />
	</label>
</div>


<button @onclick="startSimulation">Start</button>

<div class="row">
@foreach(var node in nodes) {
	var timeoutRemaining = (DateTime.Now.Millisecond - node.WhenTimerStarted.Millisecond);
		var percentageRemaining = (int)(100 * (Math.Abs(timeoutRemaining)  / node.ElectionTimeout));

	<div class="p-3 col-4">
		<div class="border p-3 rounded-3">
			<div class="d-flex flex-column justify-content-between">
				<strong>@node.InnerNode.NodeId</strong>
				<div class="@StateClass(node)">@node.State</div>
				Election Timeout: @(@node.InnerNode.ElectionTimeout) ms. <h2>Term #@node.TermNumber</h2>
				<p>@node.LeaderId</p>
					
					<div class="progress" role="progressbar" aria-label="Basic example"
						 aria-valuenow=@(Math.Abs(timeoutRemaining)) aria-valuemin="0"
						 aria-valuemax="@(node.ElectionTimeout * 300)">
						<div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;"></div>
					</div>
			</div>
		</div>
	</div>
}
</div>

@code {
	List<SimulationNode> nodes = new();

	private Timer? timer;
	bool isRunning = false;

	public int IntervalScalar = 50;

	public double NetworkRequestDelay = 1000;

	void startSimulation()
	{
		var node1 = new Node([]);
		var node2 = new Node([]);
		var node3 = new Node([]);


		var simulation1 = new SimulationNode(node1);
		var simulation2 = new SimulationNode(node2);
		var simulation3 = new SimulationNode(node3);

		node1.OtherNodes = [simulation2, simulation3];
		node2.OtherNodes = [simulation1, simulation3];
		node3.OtherNodes = [simulation1, simulation2];

		nodes = [simulation1, simulation2, simulation3];

		isRunning = true;
		timer = new Timer(_ =>
		{
			InvokeAsync(StateHasChanged);
		}, null, 0, 200);
	}

	public void UpdateTimer()
	{


	}

	string StateClass(SimulationNode node)
	{
		if (node.State == Node.NodeState.Leader)
		{
			return "bg-primary text-white";
		}
		if (node.State == Node.NodeState.Candidate)
		{
			return "bg-success text-white";
		}
		if (node.State == Node.NodeState.Follower)
		{
			return "bg-secondary text-white";
		}
		return "";
	}

	public static string FormatMilliSeconds(double milliSeconds)
	{
		return $"{milliSeconds / 1000.0:F1}";
	}
}
