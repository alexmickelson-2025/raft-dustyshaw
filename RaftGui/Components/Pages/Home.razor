@using Raft;

@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>
	<label for="speed">
		Election timeout between @(150 * Node.IntervalScalar) and @(300 *
		Node.IntervalScalar) ms.
		<br>
		<input type="range" id="speed" name="speed" min="1" max="100" @bind:event="oninput"
			   @bind=Node.IntervalScalar @onchange=UpdateTimer /> @Node.IntervalScalar
	</label>
</div>

<div>
	<label for="NetworkRequestDelay">
		Network Delay @NetworkRequestDelay milliseconds
		<br>
		<input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="0" max="10000"
			   @bind:event="oninput" @bind=NetworkRequestDelay />
	</label>
</div>


<button @onclick="startSimulation">Start (click me twice pls!!)</button>

<div class="border border-1 shadow my-5 col-md-8 p-4 rounded">
	<h3>Send a Log</h3>
	<div class="d-flex flex-row">
		<input @bind="UserCommand" placeholder="Enter Command" class="input-group-text m-2" />
		<input @bind="UserKey" placeholder="Enter Key" class="input-group-text m-2" />
	</div>
	@foreach( var node in nodes)
	{
		<button class="btn btn-outline-primary m-3" @onclick="() => SendLog(node.NodeId)">Send To @(FormatId(node.InnerNode.NodeId))</button>
	}
</div>

<div class="row">
	@foreach (var node in nodes)
	{
		var timeoutRemaining = ((node.InnerNode.WhenTimerStarted + TimeSpan.FromMilliseconds(node.ElectionTimeout)) - DateTime.Now).TotalMilliseconds;
		var maxIntervalSeconds = 300 * Node.IntervalScalar; 
		var percentageRemaining = (100 * (timeoutRemaining / (double)maxIntervalSeconds));


		<div class="p-3 col-4">
			<div class="border p-3 rounded-3">
				<div class="d-flex flex-column justify-content-between">
					<h1> @(FormatId(node.InnerNode.NodeId))</h1>
					<div class="@StateClass(node)">@node.State</div>
					<p>Election Timeout: @(@node.InnerNode.ElectionTimeout) ms.</p>
					<h2>Term #@node.TermNumber</h2>
					<p>Leader Id: @(FormatId(node.LeaderId))</p>
					<div class="progress" role="progressbar" 
						 aria-label="Basic example"
						 aria-valuenow=@(Math.Abs(timeoutRemaining) ) 
						 aria-valuemin="0"
						 aria-valuemax="@(maxIntervalSeconds)">
						<div class="progress-bar bg-dark-subtle" style="width: @(percentageRemaining)%;"></div>
					</div>
					<hr />
					<p>Commit Index: @node.CommitIndex</p>
					<div class="border-1 border-light m-2 p-2">
						<strong>State Machine</strong>
						@foreach(var commitedEntry in node.InnerNode.StateMachine) {
							<p>@commitedEntry.Index, @commitedEntry.Command, @commitedEntry.Key, @commitedEntry.TermReceived</p>
						}
					</div>
					<h4 />
					<div class="mt-3">
						<div>
							@foreach (var l in node.Entries)
							{
								@if (l.Index <= node.CommitIndex)
								{
                                    <p class="text-success">&check; index:@l.Index &nbsp; <i>"@l.Command @l.Key"</i> in term @l.TermReceived </p>
								}
								else
								{
                                    <p class="text-danger">&#10005; index:@l.Index &nbsp; <i>"@l.Command @l.Key"</i> in term @l.TermReceived</p>
								}
							}
						</div>
					@if( node.IsRunning)
					{ <button @onclick="() => pauseNode(node.NodeId)" class="btn btn-outline-primary">|| Pause Node</button>
					} else {
						<button @onclick="() => unpauseNode(node.NodeId)" class="btn btn-outline-success"> |> Play Node</button>
					}
					</div>
				</div>
			</div>
		</div>
	} 
</div>

@code {
	List<SimulationNode> nodes = new();

	private Timer? timer;
	bool isRunning = false;

	//public int IntervalScalar = 1;

	public int NetworkRequestDelay = 0;


	private string UserCommand { get; set; } = "";
	private string UserKey { get; set; } = "";

	void startSimulation()
	{
		var node1 = new Node([], NetworkRequestDelay);
		var node2 = new Node([], NetworkRequestDelay);
		var node3 = new Node([], NetworkRequestDelay);


		var simulation1 = new SimulationNode(node1);
		var simulation2 = new SimulationNode(node2);
		var simulation3 = new SimulationNode(node3);

		node1.OtherNodes = [simulation2, simulation3];
		node2.OtherNodes = [simulation1, simulation3];
		node3.OtherNodes = [simulation1, simulation2];

		nodes = [simulation1, simulation2, simulation3];

		isRunning = true;
		timer = new Timer(_ =>
		{
			InvokeAsync(StateHasChanged);
		}, null, 0, 200);
	}

	public void UpdateTimer()
	{
		foreach (var node in nodes)
		{
			node.InnerNode.LowerBoundElectionTime = 150 * Node.IntervalScalar;
			node.InnerNode.UpperBoundElectionTime = 300 * Node.IntervalScalar;
		}

		timer?.Dispose();
		timer = new Timer(_ =>
		{
			InvokeAsync(StateHasChanged);
		}, null, 0, 100 * (int)Node.IntervalScalar);

	}

	string StateClass(SimulationNode node)
	{
		if (node.State == Node.NodeState.Leader)
		{
			return "bg-primary text-white p-1 rounded";
		}
		if (node.State == Node.NodeState.Candidate)
		{
			return "bg-success text-white p-1 rounded";
		}
		if (node.State == Node.NodeState.Follower)
		{
			return "bg-secondary text-white p-1 rounded";
		}
		return "";
	}

	public static string FormatMilliSeconds(double milliSeconds)
	{
		return $"{milliSeconds / 1000.0:F1}";
	}

	public static string FormatId(Guid id)
	{
		return id.ToString("N").Substring(0, 4);
	}

	void pauseNode(Guid NodeId)
	{
		foreach (var n in nodes)
		{
			if (n.NodeId == NodeId)
			{
				n.PauseNode();
			}
		}
	}

	void unpauseNode(Guid NodeId)
	{
		foreach (var n in nodes)
		{
			if (n.NodeId == NodeId)
			{
				n.UnpauseNode();
			}
		}
	}

	void SendLog(Guid NodeId)
	{
		foreach (var n in nodes)
		{
			if (n.NodeId == NodeId)
			{
				n.InnerNode.RecieveClientCommand(UserCommand.ToString(), UserKey.ToString());
			}
		}
	}
}
